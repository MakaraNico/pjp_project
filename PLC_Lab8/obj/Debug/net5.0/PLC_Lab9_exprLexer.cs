//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\render\Desktop\skola\skola_sesty_semestr\pjp\pjp_project-master\PLC_Lab8\PLC_Lab9_new\PLC_Lab9\PLC_Lab9_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab8.PLC_Lab9_new.PLC_Lab9 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab9_exprLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, INT_KEYWORD=4, FLOAT_KEYWORD=5, SEMI=6, COMMA=7, 
		MUL=8, DIV=9, ADD=10, SUB=11, MOD=12, IDENTIFIER=13, FLOAT=14, INT=15, 
		WS=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "INT_KEYWORD", "FLOAT_KEYWORD", "SEMI", "COMMA", 
		"MUL", "DIV", "ADD", "SUB", "MOD", "IDENTIFIER", "FLOAT", "INT", "WS"
	};


	public PLC_Lab9_exprLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'='", "'int'", "'float'", "';'", "','", "'*'", "'/'", 
		"'+'", "'-'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INT_KEYWORD", "FLOAT_KEYWORD", "SEMI", "COMMA", 
		"MUL", "DIV", "ADD", "SUB", "MOD", "IDENTIFIER", "FLOAT", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab9_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x12]\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t"+
		"\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x6\xE\x43\n\xE\r\xE"+
		"\xE\xE\x44\x3\xF\x6\xFH\n\xF\r\xF\xE\xFI\x3\xF\x3\xF\x6\xFN\n\xF\r\xF"+
		"\xE\xFO\x3\x10\x6\x10S\n\x10\r\x10\xE\x10T\x3\x11\x6\x11X\n\x11\r\x11"+
		"\xE\x11Y\x3\x11\x3\x11\x2\x2\x2\x12\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6"+
		"\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12\x3\x2\x5\x4\x2\x43\\\x63|\x3\x2\x32"+
		";\x5\x2\v\f\xF\xF\"\"\x61\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3"+
		"\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3"+
		"\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2"+
		"\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2"+
		"\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x3#\x3\x2\x2\x2\x5%\x3\x2\x2\x2"+
		"\a\'\x3\x2\x2\x2\t)\x3\x2\x2\x2\v-\x3\x2\x2\x2\r\x33\x3\x2\x2\x2\xF\x35"+
		"\x3\x2\x2\x2\x11\x37\x3\x2\x2\x2\x13\x39\x3\x2\x2\x2\x15;\x3\x2\x2\x2"+
		"\x17=\x3\x2\x2\x2\x19?\x3\x2\x2\x2\x1B\x42\x3\x2\x2\x2\x1DG\x3\x2\x2\x2"+
		"\x1FR\x3\x2\x2\x2!W\x3\x2\x2\x2#$\a*\x2\x2$\x4\x3\x2\x2\x2%&\a+\x2\x2"+
		"&\x6\x3\x2\x2\x2\'(\a?\x2\x2(\b\x3\x2\x2\x2)*\ak\x2\x2*+\ap\x2\x2+,\a"+
		"v\x2\x2,\n\x3\x2\x2\x2-.\ah\x2\x2./\an\x2\x2/\x30\aq\x2\x2\x30\x31\a\x63"+
		"\x2\x2\x31\x32\av\x2\x2\x32\f\x3\x2\x2\x2\x33\x34\a=\x2\x2\x34\xE\x3\x2"+
		"\x2\x2\x35\x36\a.\x2\x2\x36\x10\x3\x2\x2\x2\x37\x38\a,\x2\x2\x38\x12\x3"+
		"\x2\x2\x2\x39:\a\x31\x2\x2:\x14\x3\x2\x2\x2;<\a-\x2\x2<\x16\x3\x2\x2\x2"+
		"=>\a/\x2\x2>\x18\x3\x2\x2\x2?@\a\'\x2\x2@\x1A\x3\x2\x2\x2\x41\x43\t\x2"+
		"\x2\x2\x42\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44"+
		"\x45\x3\x2\x2\x2\x45\x1C\x3\x2\x2\x2\x46H\t\x3\x2\x2G\x46\x3\x2\x2\x2"+
		"HI\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JK\x3\x2\x2\x2KM\a\x30\x2\x2"+
		"LN\t\x3\x2\x2ML\x3\x2\x2\x2NO\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2"+
		"P\x1E\x3\x2\x2\x2QS\t\x3\x2\x2RQ\x3\x2\x2\x2ST\x3\x2\x2\x2TR\x3\x2\x2"+
		"\x2TU\x3\x2\x2\x2U \x3\x2\x2\x2VX\t\x4\x2\x2WV\x3\x2\x2\x2XY\x3\x2\x2"+
		"\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\b\x11\x2\x2\\\"\x3\x2"+
		"\x2\x2\b\x2\x44IOTY\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab8.PLC_Lab9_new.PLC_Lab9
