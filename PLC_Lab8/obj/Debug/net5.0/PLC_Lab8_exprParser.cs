//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Renderwaves\Desktop\skola\skola6\pjp\PLC_Lab8\PLC_Lab8\PLC_Lab8_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab8 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab8_exprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, WRITE=6, READ=7, FOR=8, IF=9, 
		ELSE=10, WHILE=11, INT_KEYWORD=12, FLOAT_KEYWORD=13, STRING_KEYWORD=14, 
		BOOL_KEYWORD=15, SEMI=16, COMMA=17, MUL=18, DIV=19, ADD=20, SUB=21, MOD=22, 
		DOT=23, GT=24, LT=25, EQUAL=26, NOTEQUAL=27, AND=28, OR=29, BANG=30, FLOAT=31, 
		INT=32, BOOL=33, STRING=34, IDENTIFIER=35, WS=36, LINE_COMMENT=37;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_expr = 2, RULE_primitiveType = 3;
	public static readonly string[] ruleNames = {
		"program", "statement", "expr", "primitiveType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'='", "'write'", "'read'", "'for'", 
		"'if'", "'else'", "'while'", "'int'", "'float'", "'string'", "'bool'", 
		"';'", "','", "'*'", "'/'", "'+'", "'-'", "'%'", "'.'", "'>'", "'<'", 
		"'=='", "'!='", "'&&'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "WRITE", "READ", "FOR", "IF", "ELSE", 
		"WHILE", "INT_KEYWORD", "FLOAT_KEYWORD", "STRING_KEYWORD", "BOOL_KEYWORD", 
		"SEMI", "COMMA", "MUL", "DIV", "ADD", "SUB", "MOD", "DOT", "GT", "LT", 
		"EQUAL", "NOTEQUAL", "AND", "OR", "BANG", "FLOAT", "INT", "BOOL", "STRING", 
		"IDENTIFIER", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab8_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PLC_Lab8_exprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 8; statement();
				}
				}
				State = 11;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << WRITE) | (1L << READ) | (1L << FOR) | (1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << INT_KEYWORD) | (1L << FLOAT_KEYWORD) | (1L << STRING_KEYWORD) | (1L << BOOL_KEYWORD) | (1L << SEMI) | (1L << SUB) | (1L << BANG) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Parens1Context : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Parens1Context(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterParens1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitParens1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationContext : StatementContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(PLC_Lab8_exprParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(PLC_Lab8_exprParser.IDENTIFIER, i);
		}
		public DeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExprContext : StatementContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterPrintExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitPrintExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteExprContext : StatementContext {
		public ITerminalNode WRITE() { return GetToken(PLC_Lab8_exprParser.WRITE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterWriteExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitWriteExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadExprContext : StatementContext {
		public ITerminalNode READ() { return GetToken(PLC_Lab8_exprParser.READ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ReadExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterReadExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitReadExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : StatementContext {
		public ITerminalNode IF() { return GetToken(PLC_Lab8_exprParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterIfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitIfExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElseExprContext : StatementContext {
		public ITerminalNode ELSE() { return GetToken(PLC_Lab8_exprParser.ELSE, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterElseExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitElseExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileExprContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(PLC_Lab8_exprParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterWhileExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitWhileExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForExprContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(PLC_Lab8_exprParser.FOR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterForExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitForExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyContext : StatementContext {
		public EmptyContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 78;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				_localctx = new Parens1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; Match(T__0);
				State = 17;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << WRITE) | (1L << READ) | (1L << FOR) | (1L << IF) | (1L << ELSE) | (1L << WHILE) | (1L << INT_KEYWORD) | (1L << FLOAT_KEYWORD) | (1L << STRING_KEYWORD) | (1L << BOOL_KEYWORD) | (1L << SEMI) | (1L << SUB) | (1L << BANG) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 14; statement();
					}
					}
					State = 19;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 20; Match(T__1);
				}
				break;
			case INT_KEYWORD:
			case FLOAT_KEYWORD:
			case STRING_KEYWORD:
			case BOOL_KEYWORD:
				_localctx = new DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; primitiveType();
				State = 22; Match(IDENTIFIER);
				State = 27;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 23; Match(COMMA);
					State = 24; Match(IDENTIFIER);
					}
					}
					State = 29;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 30; Match(SEMI);
				}
				break;
			case T__2:
			case SUB:
			case BANG:
			case FLOAT:
			case INT:
			case BOOL:
			case STRING:
			case IDENTIFIER:
				_localctx = new PrintExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 32; expr(0);
				State = 33; Match(SEMI);
				}
				break;
			case WRITE:
				_localctx = new WriteExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 35; Match(WRITE);
				State = 36; expr(0);
				State = 41;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 37; Match(COMMA);
					State = 38; expr(0);
					}
					}
					State = 43;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 44; Match(SEMI);
				}
				break;
			case READ:
				_localctx = new ReadExprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 46; Match(READ);
				State = 47; expr(0);
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 48; Match(COMMA);
					State = 49; expr(0);
					}
					}
					State = 54;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 55; Match(SEMI);
				}
				break;
			case IF:
				_localctx = new IfExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 57; Match(IF);
				State = 58; expr(0);
				State = 59; statement();
				}
				break;
			case ELSE:
				_localctx = new ElseExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 61; Match(ELSE);
				State = 62; statement();
				}
				break;
			case WHILE:
				_localctx = new WhileExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 63; Match(WHILE);
				State = 64; expr(0);
				State = 65; statement();
				}
				break;
			case FOR:
				_localctx = new ForExprContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 67; Match(FOR);
				State = 68; Match(T__2);
				State = 69; expr(0);
				State = 70; Match(SEMI);
				State = 71; expr(0);
				State = 72; Match(SEMI);
				State = 73; expr(0);
				State = 74; Match(T__3);
				State = 75; statement();
				}
				break;
			case SEMI:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 77; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivModContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(PLC_Lab8_exprParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(PLC_Lab8_exprParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(PLC_Lab8_exprParser.MOD, 0); }
		public MulDivModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubDotContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(PLC_Lab8_exprParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(PLC_Lab8_exprParser.SUB, 0); }
		public ITerminalNode DOT() { return GetToken(PLC_Lab8_exprParser.DOT, 0); }
		public AddSubDotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterAddSubDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitAddSubDot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubDot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GtLtEquNotEquContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GT() { return GetToken(PLC_Lab8_exprParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(PLC_Lab8_exprParser.LT, 0); }
		public ITerminalNode EQUAL() { return GetToken(PLC_Lab8_exprParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(PLC_Lab8_exprParser.NOTEQUAL, 0); }
		public GtLtEquNotEquContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterGtLtEquNotEqu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitGtLtEquNotEqu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtLtEquNotEqu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PLC_Lab8_exprParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PLC_Lab8_exprParser.OR, 0); }
		public AndOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterAndOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitAndOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(PLC_Lab8_exprParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		public ITerminalNode BOOL() { return GetToken(PLC_Lab8_exprParser.BOOL, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab8_exprParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(PLC_Lab8_exprParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab8_exprParser.IDENTIFIER, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BangContext : ExprContext {
		public ITerminalNode BANG() { return GetToken(PLC_Lab8_exprParser.BANG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BangContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterBang(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitBang(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBang(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnarySubContext : ExprContext {
		public ITerminalNode SUB() { return GetToken(PLC_Lab8_exprParser.SUB, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnarySubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterUnarySub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitUnarySub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnarySub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab8_exprParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 81; Match(INT);
				}
				break;

			case 2:
				{
				_localctx = new BoolContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 82; Match(BOOL);
				}
				break;

			case 3:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 83; Match(FLOAT);
				}
				break;

			case 4:
				{
				_localctx = new StringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 84; Match(STRING);
				}
				break;

			case 5:
				{
				_localctx = new IdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 85; Match(IDENTIFIER);
				}
				break;

			case 6:
				{
				_localctx = new BangContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 86; Match(BANG);
				State = 87; expr(4);
				}
				break;

			case 7:
				{
				_localctx = new UnarySubContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 88; Match(SUB);
				State = 89; expr(3);
				}
				break;

			case 8:
				{
				_localctx = new ParensContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 90; Match(T__2);
				State = 91; expr(0);
				State = 92; Match(T__3);
				}
				break;

			case 9:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 94; Match(IDENTIFIER);
				State = 95; Match(T__4);
				State = 96; expr(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 113;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 111;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 100;
						((MulDivModContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MulDivModContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 101; expr(14);
						}
						break;

					case 2:
						{
						_localctx = new AddSubDotContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 103;
						((AddSubDotContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << DOT))) != 0)) ) {
							((AddSubDotContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 104; expr(13);
						}
						break;

					case 3:
						{
						_localctx = new GtLtEquNotEquContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 105;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 106;
						((GtLtEquNotEquContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << EQUAL) | (1L << NOTEQUAL))) != 0)) ) {
							((GtLtEquNotEquContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 107; expr(12);
						}
						break;

					case 4:
						{
						_localctx = new AndOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 108;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 109;
						((AndOrContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
							((AndOrContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 110; expr(11);
						}
						break;
					}
					} 
				}
				State = 115;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode INT_KEYWORD() { return GetToken(PLC_Lab8_exprParser.INT_KEYWORD, 0); }
		public ITerminalNode FLOAT_KEYWORD() { return GetToken(PLC_Lab8_exprParser.FLOAT_KEYWORD, 0); }
		public ITerminalNode STRING_KEYWORD() { return GetToken(PLC_Lab8_exprParser.STRING_KEYWORD, 0); }
		public ITerminalNode BOOL_KEYWORD() { return GetToken(PLC_Lab8_exprParser.BOOL_KEYWORD, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab8_exprListener typedListener = listener as IPLC_Lab8_exprListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab8_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab8_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_primitiveType);
		try {
			State = 120;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_KEYWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; _localctx.type = Match(INT_KEYWORD);
				}
				break;
			case FLOAT_KEYWORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; _localctx.type = Match(FLOAT_KEYWORD);
				}
				break;
			case STRING_KEYWORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118; _localctx.type = Match(STRING_KEYWORD);
				}
				break;
			case BOOL_KEYWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119; _localctx.type = Match(BOOL_KEYWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 13);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\'}\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x6\x2\f\n\x2\r\x2\xE\x2\r\x3\x3\x3"+
		"\x3\a\x3\x12\n\x3\f\x3\xE\x3\x15\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a"+
		"\x3\x1C\n\x3\f\x3\xE\x3\x1F\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\a\x3*\n\x3\f\x3\xE\x3-\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\a\x3\x35\n\x3\f\x3\xE\x3\x38\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3Q\n\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\x64\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4r\n\x4\f\x4\xE\x4u\v\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5{\n\x5\x3\x5\x2\x2\x3\x6\x6\x2\x2\x4\x2\x6\x2"+
		"\b\x2\x2\x6\x4\x2\x14\x15\x18\x18\x4\x2\x16\x17\x19\x19\x3\x2\x1A\x1D"+
		"\x3\x2\x1E\x1F\x95\x2\v\x3\x2\x2\x2\x4P\x3\x2\x2\x2\x6\x63\x3\x2\x2\x2"+
		"\bz\x3\x2\x2\x2\n\f\x5\x4\x3\x2\v\n\x3\x2\x2\x2\f\r\x3\x2\x2\x2\r\v\x3"+
		"\x2\x2\x2\r\xE\x3\x2\x2\x2\xE\x3\x3\x2\x2\x2\xF\x13\a\x3\x2\x2\x10\x12"+
		"\x5\x4\x3\x2\x11\x10\x3\x2\x2\x2\x12\x15\x3\x2\x2\x2\x13\x11\x3\x2\x2"+
		"\x2\x13\x14\x3\x2\x2\x2\x14\x16\x3\x2\x2\x2\x15\x13\x3\x2\x2\x2\x16Q\a"+
		"\x4\x2\x2\x17\x18\x5\b\x5\x2\x18\x1D\a%\x2\x2\x19\x1A\a\x13\x2\x2\x1A"+
		"\x1C\a%\x2\x2\x1B\x19\x3\x2\x2\x2\x1C\x1F\x3\x2\x2\x2\x1D\x1B\x3\x2\x2"+
		"\x2\x1D\x1E\x3\x2\x2\x2\x1E \x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2 !\a\x12\x2"+
		"\x2!Q\x3\x2\x2\x2\"#\x5\x6\x4\x2#$\a\x12\x2\x2$Q\x3\x2\x2\x2%&\a\b\x2"+
		"\x2&+\x5\x6\x4\x2\'(\a\x13\x2\x2(*\x5\x6\x4\x2)\'\x3\x2\x2\x2*-\x3\x2"+
		"\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,.\x3\x2\x2\x2-+\x3\x2\x2\x2./\a\x12"+
		"\x2\x2/Q\x3\x2\x2\x2\x30\x31\a\t\x2\x2\x31\x36\x5\x6\x4\x2\x32\x33\a\x13"+
		"\x2\x2\x33\x35\x5\x6\x4\x2\x34\x32\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36"+
		"\x34\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x39\x3\x2\x2\x2\x38\x36\x3\x2"+
		"\x2\x2\x39:\a\x12\x2\x2:Q\x3\x2\x2\x2;<\a\v\x2\x2<=\x5\x6\x4\x2=>\x5\x4"+
		"\x3\x2>Q\x3\x2\x2\x2?@\a\f\x2\x2@Q\x5\x4\x3\x2\x41\x42\a\r\x2\x2\x42\x43"+
		"\x5\x6\x4\x2\x43\x44\x5\x4\x3\x2\x44Q\x3\x2\x2\x2\x45\x46\a\n\x2\x2\x46"+
		"G\a\x5\x2\x2GH\x5\x6\x4\x2HI\a\x12\x2\x2IJ\x5\x6\x4\x2JK\a\x12\x2\x2K"+
		"L\x5\x6\x4\x2LM\a\x6\x2\x2MN\x5\x4\x3\x2NQ\x3\x2\x2\x2OQ\a\x12\x2\x2P"+
		"\xF\x3\x2\x2\x2P\x17\x3\x2\x2\x2P\"\x3\x2\x2\x2P%\x3\x2\x2\x2P\x30\x3"+
		"\x2\x2\x2P;\x3\x2\x2\x2P?\x3\x2\x2\x2P\x41\x3\x2\x2\x2P\x45\x3\x2\x2\x2"+
		"PO\x3\x2\x2\x2Q\x5\x3\x2\x2\x2RS\b\x4\x1\x2S\x64\a\"\x2\x2T\x64\a#\x2"+
		"\x2U\x64\a!\x2\x2V\x64\a$\x2\x2W\x64\a%\x2\x2XY\a \x2\x2Y\x64\x5\x6\x4"+
		"\x6Z[\a\x17\x2\x2[\x64\x5\x6\x4\x5\\]\a\x5\x2\x2]^\x5\x6\x4\x2^_\a\x6"+
		"\x2\x2_\x64\x3\x2\x2\x2`\x61\a%\x2\x2\x61\x62\a\a\x2\x2\x62\x64\x5\x6"+
		"\x4\x3\x63R\x3\x2\x2\x2\x63T\x3\x2\x2\x2\x63U\x3\x2\x2\x2\x63V\x3\x2\x2"+
		"\x2\x63W\x3\x2\x2\x2\x63X\x3\x2\x2\x2\x63Z\x3\x2\x2\x2\x63\\\x3\x2\x2"+
		"\x2\x63`\x3\x2\x2\x2\x64s\x3\x2\x2\x2\x65\x66\f\xF\x2\x2\x66g\t\x2\x2"+
		"\x2gr\x5\x6\x4\x10hi\f\xE\x2\x2ij\t\x3\x2\x2jr\x5\x6\x4\xFkl\f\r\x2\x2"+
		"lm\t\x4\x2\x2mr\x5\x6\x4\xEno\f\f\x2\x2op\t\x5\x2\x2pr\x5\x6\x4\rq\x65"+
		"\x3\x2\x2\x2qh\x3\x2\x2\x2qk\x3\x2\x2\x2qn\x3\x2\x2\x2ru\x3\x2\x2\x2s"+
		"q\x3\x2\x2\x2st\x3\x2\x2\x2t\a\x3\x2\x2\x2us\x3\x2\x2\x2v{\a\xE\x2\x2"+
		"w{\a\xF\x2\x2x{\a\x10\x2\x2y{\a\x11\x2\x2zv\x3\x2\x2\x2zw\x3\x2\x2\x2"+
		"zx\x3\x2\x2\x2zy\x3\x2\x2\x2{\t\x3\x2\x2\x2\f\r\x13\x1D+\x36P\x63qsz";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab8
