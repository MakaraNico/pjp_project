//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\render\Desktop\skola\skola_sesty_semestr\pjp\pjp_project-master\PLC_Lab8\PLC_Lab9_new\PLC_Lab9\PLC_Lab9_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab8.PLC_Lab9_new.PLC_Lab9 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab9_exprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, INT_KEYWORD=4, FLOAT_KEYWORD=5, SEMI=6, COMMA=7, 
		MUL=8, DIV=9, ADD=10, SUB=11, MOD=12, IDENTIFIER=13, FLOAT=14, INT=15, 
		WS=16;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_expr = 2, RULE_primitiveType = 3;
	public static readonly string[] ruleNames = {
		"program", "statement", "expr", "primitiveType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'='", "'int'", "'float'", "';'", "','", "'*'", "'/'", 
		"'+'", "'-'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INT_KEYWORD", "FLOAT_KEYWORD", "SEMI", "COMMA", 
		"MUL", "DIV", "ADD", "SUB", "MOD", "IDENTIFIER", "FLOAT", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab9_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PLC_Lab9_exprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 8; statement();
				}
				}
				State = 11;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << INT_KEYWORD) | (1L << FLOAT_KEYWORD) | (1L << IDENTIFIER) | (1L << FLOAT) | (1L << INT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationContext : StatementContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(PLC_Lab9_exprParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(PLC_Lab9_exprParser.IDENTIFIER, i);
		}
		public DeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExprContext : StatementContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterPrintExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitPrintExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 27;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_KEYWORD:
			case FLOAT_KEYWORD:
				_localctx = new DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; primitiveType();
				State = 14; Match(IDENTIFIER);
				State = 19;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 15; Match(COMMA);
					State = 16; Match(IDENTIFIER);
					}
					}
					State = 21;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 22; Match(SEMI);
				}
				break;
			case T__0:
			case IDENTIFIER:
			case FLOAT:
			case INT:
				_localctx = new PrintExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; expr(0);
				State = 25; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivModContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(PLC_Lab9_exprParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(PLC_Lab9_exprParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(PLC_Lab9_exprParser.MOD, 0); }
		public MulDivModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab9_exprParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(PLC_Lab9_exprParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(PLC_Lab9_exprParser.SUB, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab9_exprParser.IDENTIFIER, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab9_exprParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(PLC_Lab9_exprParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 30; Match(INT);
				}
				break;

			case 2:
				{
				_localctx = new IdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 31; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 32; Match(FLOAT);
				}
				break;

			case 4:
				{
				_localctx = new ParensContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 33; Match(T__0);
				State = 34; expr(0);
				State = 35; Match(T__1);
				}
				break;

			case 5:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 37; Match(IDENTIFIER);
				State = 38; Match(T__2);
				State = 39; expr(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 50;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 48;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 42;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 43;
						((MulDivModContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MulDivModContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 44; expr(8);
						}
						break;

					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 45;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 46;
						((AddSubContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 47; expr(7);
						}
						break;
					}
					} 
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode INT_KEYWORD() { return GetToken(PLC_Lab9_exprParser.INT_KEYWORD, 0); }
		public ITerminalNode FLOAT_KEYWORD() { return GetToken(PLC_Lab9_exprParser.FLOAT_KEYWORD, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_primitiveType);
		try {
			State = 55;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_KEYWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; _localctx.type = Match(INT_KEYWORD);
				}
				break;
			case FLOAT_KEYWORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; _localctx.type = Match(FLOAT_KEYWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 7);

		case 1: return Precpred(_ctx, 6);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x12<\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x6\x2\f\n\x2\r\x2\xE\x2\r\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\a\x3\x14\n\x3\f\x3\xE\x3\x17\v\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\x1E\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4+\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\a\x4\x33\n\x4\f\x4\xE\x4\x36\v\x4\x3\x5\x3\x5\x5\x5:\n\x5\x3\x5\x2"+
		"\x2\x3\x6\x6\x2\x2\x4\x2\x6\x2\b\x2\x2\x4\x4\x2\n\v\xE\xE\x3\x2\f\r\x41"+
		"\x2\v\x3\x2\x2\x2\x4\x1D\x3\x2\x2\x2\x6*\x3\x2\x2\x2\b\x39\x3\x2\x2\x2"+
		"\n\f\x5\x4\x3\x2\v\n\x3\x2\x2\x2\f\r\x3\x2\x2\x2\r\v\x3\x2\x2\x2\r\xE"+
		"\x3\x2\x2\x2\xE\x3\x3\x2\x2\x2\xF\x10\x5\b\x5\x2\x10\x15\a\xF\x2\x2\x11"+
		"\x12\a\t\x2\x2\x12\x14\a\xF\x2\x2\x13\x11\x3\x2\x2\x2\x14\x17\x3\x2\x2"+
		"\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x18\x3\x2\x2\x2\x17\x15"+
		"\x3\x2\x2\x2\x18\x19\a\b\x2\x2\x19\x1E\x3\x2\x2\x2\x1A\x1B\x5\x6\x4\x2"+
		"\x1B\x1C\a\b\x2\x2\x1C\x1E\x3\x2\x2\x2\x1D\xF\x3\x2\x2\x2\x1D\x1A\x3\x2"+
		"\x2\x2\x1E\x5\x3\x2\x2\x2\x1F \b\x4\x1\x2 +\a\x11\x2\x2!+\a\xF\x2\x2\""+
		"+\a\x10\x2\x2#$\a\x3\x2\x2$%\x5\x6\x4\x2%&\a\x4\x2\x2&+\x3\x2\x2\x2\'"+
		"(\a\xF\x2\x2()\a\x5\x2\x2)+\x5\x6\x4\x3*\x1F\x3\x2\x2\x2*!\x3\x2\x2\x2"+
		"*\"\x3\x2\x2\x2*#\x3\x2\x2\x2*\'\x3\x2\x2\x2+\x34\x3\x2\x2\x2,-\f\t\x2"+
		"\x2-.\t\x2\x2\x2.\x33\x5\x6\x4\n/\x30\f\b\x2\x2\x30\x31\t\x3\x2\x2\x31"+
		"\x33\x5\x6\x4\t\x32,\x3\x2\x2\x2\x32/\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2"+
		"\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\a\x3\x2\x2\x2\x36\x34\x3"+
		"\x2\x2\x2\x37:\a\x6\x2\x2\x38:\a\a\x2\x2\x39\x37\x3\x2\x2\x2\x39\x38\x3"+
		"\x2\x2\x2:\t\x3\x2\x2\x2\t\r\x15\x1D*\x32\x34\x39";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab8.PLC_Lab9_new.PLC_Lab9
